*olppet.txt* snippets engine

Author: TamDik
License: MIT license

==============================================================================
INTRODUCTION                                             *olppet-introduction*

==============================================================================
INSTALL                                                       *olppet-install*

Please install Deno and "denops.vim".

https://deno.land/
https://github.com/vim-denops/denops.vim

Note: olppet.vim does not include any snippets.

==============================================================================
INTERFACE                                                   *olppet-interface*

------------------------------------------------------------------------------
FUNCTIONS                                                   *olppet-functions*

                                                             *olppet#enable()*
olppet#enable()
        Enable olppet.vim plugin.

                                                            *olppet#disable()*
olppet#disable()
        Disable olppet.vim plugin.

                                                   *olppet#register_snippet()*
olppet#register_snippet({path}, {type}[, {subdirectory}])
        Register snippets directory.
        {type} is the type of the parser. See also |olppet-parsers|.
        The following files are read for snippets: >
    {path}/{scope}.{extension}
    {path}/{scope}-*.{extension}
    {path}/{scope}_*.{extension}
    {path}/{scope}/*.{extension}
<
        where {path} is the path to the local snippets directory, {scope} is
        'filetype', and {extension} is different for each parser. The files
        specified by each parser are also read.

        Note: If you want to use the snippets that is in the 'runtimepath',
        you can use user/repo (ex: honza/vim-snippets) as {path} instead of
        the full path.
        Note: If {subdirectory} is specified, {path} is replaced by
        {path}/{subdirectory}.

        Example: >
    call olppet#register_snippet(
        \ '/path/to/snippets/directory',
        \ 'VSCode'
        \ )

    call olppet#register_snippet(
        \ 'honza/vim-snippets',
        \ 'SnipMate',
        \ 'snippets'
        \ )
<

                                                             *olppet#expand()*
olppet#expand()
        Expand a snippet.
        Returns |v:true| if there is an expandable snippet, |v:false|
        otherwise.

                                                       *olppet#jump_forward()*
olppet#jump_forward()
        Jump to the forward tab stop.
        Returns |v:true| if there is a next tab stop, |v:false| otherwise.

                                                      *olppet#jump_backward()*
olppet#jump_backward()
        Jump to the previous tab stop.
        Returns |v:true| if there is a previous tab stop, |v:false| otherwise.

                                                       *olppet#get_snippets()*
olppet#get_snippets([{filetype}])
        Get all snippets.
        You can specify {filetype}. The default value is 'filetype'.
        Returns a |List| of |List| with two items ({trigger}, {description})
        each. If the description of the snippet is not given, {description}
        will be |v:null|.

------------------------------------------------------------------------------
KEY MAPPINGS                                             *olppet-key-mappings*

<Plug>(olppet-expand)                                  *<Plug>(olppet-expand)*
        Expand a snippet.

<Plug>(olppet-jump-forward)                      *<Plug>(olppet-jump-forward)*
        Jump to the forward tab stop.

<Plug>(olppet-jump-backward)                    *<Plug>(olppet-jump-backward)*
        Jump to the previous tab stop.

==============================================================================
EXAMPLES                                                     *olppet-examples*
>
    Plug 'TamDik/olppet.vim'
    Plug 'vim-denops/denops.vim'
    Plug 'honza/vim-snippets'

    imap <tab> <Plug>(olppet-expand)
    imap <C-f> <Plug>(olppet-jump-forward)
    imap <C-b> <Plug>(olppet-jump-backward)

    call olppet#register_snippet(
        \ '/path/to/snippets/directory',
        \ 'VSCode'
        \ )

    call olppet#register_snippet(
        \ 'honza/vim-snippets',
        \ 'SnipMate',
        \ 'snippets'
        \ )
    call olppet#enable()
<

==============================================================================
PARSERS                                                       *olppet-parsers*

                                                      *olppet-snipmate-parser*
SnipMateParser
        Parser for SnipMate style snippets.
        https://github.com/garbas/vim-snipmate

        type: "SnipMate"
        extension: "snippets"
        files: {path}/_.snippets

                                                        *olppet-vscode-parser*
VSCodeParser
        Parser for Visual Studio Code style snippets.
        https://code.visualstudio.com/docs/editor/userdefinedsnippets

        type: "VSCode"
        extension: "json"
        files: {path}/*.code-snippets


==============================================================================
COMPLETION                                                 *olppet-completion*

Olppet.vim supports ddc.vim.
>
    call ddc#custom#patch_global('sources', ['olppet'])
    call ddc#custom#patch_global('sourceOptions', {
        \   '_': {
        \     'matchers': ['matcher_head'],
        \     'sorters': ['sorter_rank']
        \   },
        \   'olppet': {
        \     'mark': 'olppet',
        \   },
        \ })
<

vim:tw=78:ts=8:ft=help:norl:
